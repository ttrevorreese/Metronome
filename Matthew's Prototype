
{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "O8dJN-C_0mSi",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 240
        },
        "outputId": "3aefeb6c-96b4-4bd9-f63d-b356ea75bc9b"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-5f1d0f2d1a2f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     65\u001b[0m   \u001b[0mtimestamps\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m   \u001b[0;32mfor\u001b[0m \u001b[0msong\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"items\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m         \u001b[0msong_names\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msong\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"track\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"name\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m         \u001b[0martist_names\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msong\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"track\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"album\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"artists\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"name\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'items'"
          ]
        }
      ],
      "source": [
        "import sqlalchemy\n",
        "import pandas as pd\n",
        "from sqlalchemy.orm import sessionmaker\n",
        "import requests\n",
        "import json\n",
        "from datetime import datetime\n",
        "import datetime \n",
        "import sqlite3\n",
        "\n",
        "DATABASE_LOCATION = \"sqlite://my_played_tracks.sqlite\"\n",
        "USER_ID = \"lowriem\"\n",
        "\n",
        "####  PRINT OF A NEW TOKEN EVERY FEW MINTUES AS THEY EXPIRE AT THE FOLLOWING URL: https://developer.spotify.com/console/get-recently-played/?limit=10&after=1596299315000&before=\n",
        "TOKEN = \"BQAmFs31hOIMU8kAnOUc5tXpUJLihIUF0OXxauImhswEaWpzlXCXZPDzIxWOfz8KSfttzLM_wAvkksyzI-0IOaVqX_AM8wEWeP7ULINBKUH7DieZgFVpsWqnL97xS5Z9lVL1pS2CzWSYLpPEmjEp9HirjcKZgp_e3zpj29NPB6-xPogFPNI9_3dwnZfqB291WlLF4REEiA\"\n",
        "\n",
        "\n",
        "\n",
        "def check_if_valid_data(df: pd.DataFrame) -> bool:\n",
        "\n",
        "  if df.empty:\n",
        "    print(\"No songs downloaded, finishing process\")\n",
        "    return False\n",
        "\n",
        "\n",
        "  if pd.Series(df['played_at']).is_unique:\n",
        "    pass\n",
        "  else:\n",
        "    raise Exception(\"Primary Key check was violated, duplicates detected\")\n",
        "\n",
        "\n",
        "  if df.isnull().values.any():\n",
        "    raise Exception(\"Null value found. Terminated\")\n",
        "\n",
        "\n",
        "  yesterday = datetime.datetime.now() - datetime.timedelta(days=1)\n",
        "  yesterday = yesterday.replace(hour = 0, minute = 0, second = 0, microsecond = 0)\n",
        "\n",
        "  timestamps = df[\"timestamp\"].tolist()\n",
        "#  for timestamp in timestamps:\n",
        "#    if datetime.datetime.strptime(timestamp, \"%Y-%m-%d\") != yesterday:\n",
        "#      raise Exception(\"One of the values was not in the time constraint\")\n",
        "\n",
        "  return True\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "  headers = {\n",
        "      \"Accept\" : \"application/json\",\n",
        "      \"Content-Type\" : \"application/json\",\n",
        "      \"Authorization\" : \"Bearer {token}\".format(token=TOKEN)\n",
        "  }\n",
        "\n",
        "\n",
        "  today = datetime.datetime.now()\n",
        "  yesterday = today - datetime.timedelta(days=10)\n",
        "  yesterday_unix_timestamp = int(yesterday.timestamp()) * 1000\n",
        "\n",
        "  r = requests.get(\"https://api.spotify.com/v1/me/player/recently-played?after={time}\".format(time = yesterday_unix_timestamp), headers = headers)\n",
        "\n",
        "  data = r.json()\n",
        "\n",
        "  song_names =[]\n",
        "  artist_names = []\n",
        "  played_at_list = []\n",
        "  timestamps = []\n",
        "\n",
        "  for song in data[\"items\"]:\n",
        "        song_names.append(song[\"track\"][\"name\"])\n",
        "        artist_names.append(song[\"track\"][\"album\"][\"artists\"][0][\"name\"])\n",
        "        played_at_list.append(song[\"played_at\"])\n",
        "        timestamps.append(song[\"played_at\"][0:10])\n",
        "  \n",
        "  song_dict = {\n",
        "      \"song_name\" : song_names,\n",
        "      \"artist_names\" : artist_names,\n",
        "      \"played_at\" : played_at_list,\n",
        "      \"timestamp\" : timestamps\n",
        "  }\n",
        "  song_df = pd.DataFrame(song_dict, columns = [\"song_name\", \"artist_names\", \"played_at\", \"timestamp\"])\n",
        "\n",
        "\n",
        "\n",
        "from tabulate import tabulate\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "print(tabulate(song_df, headers='keys', tablefmt='psql'))\n",
        "\n",
        "\n",
        "#validate\n",
        "\n",
        "if check_if_valid_data(song_df):\n",
        "  print(\"Data Valid, proceed to loading stage\")\n",
        "\n",
        "\n",
        "#load\n",
        "engine = sqlalchemy.create_engine(DATABASE_LOCATION)\n",
        "conn = sqlite3.connect(\"my_played_traks.sqlite\")\n",
        "cursor = conn.cursor()\n",
        "\n",
        "sql_query = \"\"\"\n",
        "CREATE TABLE IF NOT EXISTS my_played_tracks(\n",
        "  song_name VARCHAR(200),\n",
        "  artist_name VARCHAR(200),\n",
        "  played_at VARCHAR(200),\n",
        "  timestamp VARCHAR(200),\n",
        "  CONSTRAINT primary_key_constraint PRIMARY KEY (played_at)\n",
        ")\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "cursor.execute(sql_query)\n",
        "print(\"Opened database successfully\")\n",
        "\n",
        "try:\n",
        "    song_df.to_sql(\"my_played_tracks\", engine, index=False, if_exists='append')\n",
        "except:\n",
        "    print(\"Data already exists in the database\")\n",
        "\n",
        "conn.close()\n",
        "print(\"Close database successfully\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "###DAG###\n",
        "\n",
        "from datetime import timedelta\n",
        "from airflow import DAG\n",
        "from airflow.operators.python_operator import PythonOperator\n",
        "from airflow.utils.dates import days_ago\n",
        "\n",
        "from spotify_etl import run_spotify_etl\n",
        "\n",
        "default_args = {\n",
        "    'owner': 'airflow',\n",
        "    'depends_on_past': False,\n",
        "    'start_date': datetime(2020, 11, 8),\n",
        "    'email': ['airflow@example.com'],\n",
        "    'email_on_failure': False,\n",
        "    'email_on_retry': False,\n",
        "    'retries': 1,\n",
        "    'retry_delay': timedelta(minutes=1)\n",
        "}\n",
        "\n",
        "dag = DAG(\n",
        "    'spotify_dag',\n",
        "    default_args=default_args,\n",
        "    description='Our first DAG with ETL process!',\n",
        "    schedule_interval=timedelta(days=1),\n",
        ")\n",
        "\n",
        "def just_a_function():\n",
        "    print(\"I'm going to show you something :)\")\n",
        "\n",
        "run_etl = PythonOperator(\n",
        "    task_id='whole_spotify_etl',\n",
        "    python_callable=run_spotify_etl,\n",
        "    dag=dag,\n",
        ")\n",
        "\n",
        "run_etl"
      ],
      "metadata": {
        "id": "OhTMw54j7hFh"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
